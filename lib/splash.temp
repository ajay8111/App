class PageD extends StatefulWidget {
  @override
  _PageDState createState() => _PageDState();
}

class _PageCState extends State<PageC> {
  final List<Offset> tappedSquares = [];
  bool showCompletedAnimation = false;

  void resetGrid() {
    setState(() {
      tappedSquares.clear();
    });
  }

  void checkGrid() {
    // Implement your logic for checking the grid here
    print('Checking grid...');
    // Show completed animation
    setState(() {
      showCompletedAnimation = true;
    });
    // Hide completed animation after 3 seconds
    Future.delayed(Duration(seconds: 10), () {
      setState(() {
        showCompletedAnimation = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: LayoutBuilder(
        builder: (context, constraints) {
          return Stack(
            children: [
              // Gradient Blue Background
              Container(
                width: constraints.maxWidth,
                height: constraints.maxHeight,
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [
                      Color.fromARGB(255, 125, 163, 208),
                      Colors.blue.shade900
                    ],
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                  ),
                ),
              ),
              // Grid Background with Dark Blue Color
              Container(
                width: constraints.maxWidth,
                height: constraints.maxHeight /
                    2, // Adjusted height to cover only the bottom half
                child: GestureDetector(
                  onTapDown: (details) {
                    setState(() {
                      final RenderBox box =
                          context.findRenderObject() as RenderBox;
                      final Offset localOffset =
                          box.globalToLocal(details.globalPosition);
                      tappedSquares.add(localOffset);
                    });
                  },
                  child: CustomPaint(
                    painter: GridPainter(
                        tappedSquares:
                            tappedSquares), // Custom painter for drawing grid lines
                  ),
                ),
              ),
              // Positioned widget to place the C letter image on top screen
              Positioned(
                top: constraints.maxHeight * 0.4, // Adjust as needed
                left: 0,
                right: 0,
                child: Center(
                  child: Image.asset(
                    'assets/Cletter.png', // Path to your C letter image
                    width: constraints.maxWidth * 0.3, // Adjust size as needed
                    height: constraints.maxHeight * 0.2,
                  ),
                ),
              ),
              // Check button
              Positioned(
                bottom: constraints.maxHeight * 0.1,
                left: constraints.maxWidth * 0.3,
                right: constraints.maxWidth * 0.3,
                child: ElevatedButton(
                  onPressed: checkGrid,
                  child: Text('Check'),
                ),
              ),
              // Reset button
              Positioned(
                bottom: constraints.maxHeight * 0.02,
                left: constraints.maxWidth * 0.3,
                right: constraints.maxWidth * 0.3,
                child: ElevatedButton(
                  onPressed: resetGrid,
                  child: Text('Reset'),
                ),
              ),
              // Completed Animation
              if (showCompletedAnimation)
                Positioned(
                  bottom: constraints.maxHeight * 0.1,
                  left: constraints.maxWidth * 0.2,
                  right: constraints.maxWidth * 0.2,
                  child: Lottie.asset(
                    'assets/completed.json',
                    width: constraints.maxWidth * 0.4,
                    height: constraints.maxHeight * 0.4,
                  ),
                ),
            ],
          );
        },
      ),
    );
  }
}

class GridPainter4 extends CustomPainter {
  final List<Offset> tappedSquares;

  GridPainter3({required this.tappedSquares});

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.blue.withOpacity(0.1) // Light blue color for grid lines
      ..strokeWidth = 3;

    final cellSize = cmToPixels(4);
    final borderRadius = BorderRadius.circular(cellSize / 2);

    // Draw vertical lines
    for (double i = 0; i < size.width; i += cellSize) {
      canvas.drawLine(
          Offset(i, size.height / 2), Offset(i, size.height), paint);
    }

    // Draw horizontal lines only in the bottom half
    for (double i = size.height / 2; i < size.height; i += cellSize) {
      canvas.drawLine(Offset(0, i), Offset(size.width, i), paint);
    }

    final yellowPaint = Paint()..color = Colors.yellowAccent;
    final borderPaint = Paint()
      ..color = Colors.black
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2; // Adjust border width as needed

    for (final tappedSquare in tappedSquares) {
      final xIndex = (tappedSquare.dx / cellSize).floor();
      final yIndex = ((tappedSquare.dy - size.height / 2) / cellSize).floor();

      final x = xIndex * cellSize;
      final y = yIndex * cellSize + size.height / 2;

      final roundedRect = RRect.fromRectAndRadius(
        Rect.fromLTWH(x, y, cellSize, cellSize),
        Radius.circular(
            cellSize / 4), // Adjust the radius for desired roundness
      );

      // Draw yellow square
      canvas.drawRRect(roundedRect, yellowPaint);

      // Draw black border around the yellow square
      canvas.drawRRect(roundedRect, borderPaint);
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true; // Always repaint to update the tapped squares
  }

  double cmToPixels(double cm) {
    return cm * 11.3779528; // 1 cm = 11.3779528 pixels (approx.)
  }
}